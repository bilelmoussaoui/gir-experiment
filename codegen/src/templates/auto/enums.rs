// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::{prelude::*, translate::*};

{% for enum in enums %}
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "{{enum.c_type}}")]
pub enum {{enum.name}} {
{%- for member in enum.members %}
    #[doc(alias = "{{member.c_identifier}}")]
    {{member.name}},
{%- endfor %}
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for {{enum.name}} {
    type GlibType = ffi::{{enum.c_type}};

    fn into_glib(self) -> ffi::{{enum.c_type}} {
        match self {
{%- for member in enum.members %}
            Self::{{member.name}} => ffi::{{member.c_identifier}},
{%- endfor %}
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::{{enum.c_type}}> for {{enum.name}} {
    unsafe fn from_glib(value: ffi::{{enum.c_type}}) -> Self {
        skip_assert_initialized!();

        match value {

{%- for member in enum.members %}
            ffi::{{member.c_identifier}} => Self::{{member.name}},
{%- endfor %}
            value => Self::__Unknown(value),
        }
    }
}

{% if enum.g_get_type %}
impl StaticType for {{enum.name}} {
    #[inline]
    #[doc(alias = "{{enum.g_get_type}}")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::{{enum.g_get_type}}()) }
    }
}
{% endif %}

impl glib::HasParamSpec for {{enum.name}} {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for {{enum.name}} {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for {{enum.name}} {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for {{enum.name}} {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<{{enum.name}}> for glib::Value {
    #[inline]
    fn from(v: {{enum.name}}) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}
{% endfor %}
